#+TITLE: Collision Detection
#+AUTHOR: Scott Barrett

* Basic Idea

Collision detection involves two major steps: detection, and reaction.
To detect collision, we have two basic options: Either /predict/ that
a collision is about to occur and react accordingly, or /observe/ that
a collision has just occurred and work to correct it. The second
approach is much simpler, and is the approach we'll take in this
class.

Each frame, we will look at every pair of object that could possibly
collide. Then, we'll do a test to see if that pair of objects is
overlapping. Overlapping shapes are, of course, colliding.

Once we've found a pair of overlapping shapes, we'll first move them
apart from one another so that, instead of overlapping, they're
exactly touching. In real life, physical objects can never overlap --
they can only touch one another. So we'll "correct" the overlap to
make our scene look natural.

After we correct the positions of the objects, we'll modify their
velocities so that they "bounce" off of each other realistically.
While in reality objects only change their velocities based off of the
forces they experience, and so velocity is never directly modified, in
the case of collisions the forces are so large and act for such a
short duration that they take place over much less than a single frame
of gameplay. Therefore, it works best to calculate the new velocities
directly rather than work indirectly through forces.

Once we've corrected the positions and velocities of the objects, our
work is done! In essence, the plan looks like this:

1. Update each object as normal each frame
2. Check to see if two objects collided
3. Move colliding objects apart from each other so they no longer
   overlap
4. Modify the velocity of the colliding objects so they bounce off of
   each other realistically.

Since step 1 is already happening from our previous work, we will need
to implement steps 2, 3, and 4.

* How To Check If Two Objects Are Colliding

At a high level, to detect whether or not objects are colliding in the
scene, *you must iterate through /every pair/ of possibly colliding
objects*. Below is some sample C++ code that checks all the spheres in
the array =spheres= to see if they are colliding with any /other/
spheres in that same array:

#+BEGIN_SRC C++
  for (int i = 0; i < nSpheres; i++)
  {
    Sphere s1 = spheres[i];
    for (int j = i+1; j < nSpheres; j++)
    {
      Sphere s2 = spheres[j];
      if (AreOverlapping(s1, s2))
      {
	std::cout << "Spheres are colliding!\n";
      }
    }
  }
#+END_SRC

Knowing whether or not two objects are colliding requires us to know
what shape they are. We will begin our examples by looking at how to
detect and resolve collision between two spheres. Afterwards, we will
examine how to resolve collision between a sphere and a plane. We will
see there are many parts of the process that are the same, and a few
parts that are different.

** Checking If Two Spheres Overlap
Let's consider two overlapping spheres:

#+ATTR_HTML: :width 400px
#+ATTR_LATEX: :width 400px
#+CAPTION: Two Overlapping Circles.
[[./circle_overlap_nolines.png]]

We need to check if these two circles are overlapping. Obviously, we
can see that they are. But our code has to make this decision based on
the spheres' radii and the distance between them.

If we know the distance between the centers of the spheres, $d$, we
can see a few patterns emerge in the relationship between $d$ and the
spheres:

1. If the spheres are large and $d$ is small, the spheres /are
   colliding/.
2. If the spheres are small and $d$ is large, the spheres /are _not_
   colliding/.

#+ATTR_HTML: :width 400px
#+ATTR_LATEX: :width 400px
#+CAPTION: Large spheres, small $d$ -- colliding. Amount by which spheres overlap is in red.
[[./circles_big_overlap.png]]

#+ATTR_HTML: :width 400px
#+ATTR_LATEX: :width 400px
#+CAPTION: Small spheres, large $d$ -- not colliding.
[[./circles_distant.png]]

We can also see that, if $d$ is exactly equal to the sum of the radii,
that is if $d = r_1+r_2$ where $r_1$ is the radius of the first sphere
and $r_2$ is the radius of the second sphere, the spheres are
touching, but are just short of colliding.

#+ATTR_HTML: :width 400px
#+ATTR_LATEX: :width 400px
#+CAPTION: Spheres that just barely touch. $d = r_1 + r_2$.
[[./circles_adjacent.png]]

#+begin_comment
Insert a figure here with spheres just barely touching. Maybe also
some figures earlier with small spheres far apart and large spheres
nearby.
#+end_comment

This is our key insight. If the spheres are closer than this, they
must be overlapping. So, to see if two spheres overlap, we use an
inequality based on the above equation:

$$r_1+r_2 > d$$ means the spheres are colliding.

$$r_1+r_2\leq d$$ means the spheres are _not_ colliding.

This is all we need to determine if the spheres are colliding. Now we
need to calculate d.

*** Calculating the Distance Between Spheres

If $\vec{s_1}$ and $\vec{s_2}$ are the vectors representing the center
of sphere 1 and sphere 2 respectively, we can get the vector from
$\vec{s_1}$ to $\vec{s_2}$ using simple vector subtraction:

$$\vec{d}=\vec{s_1} - \vec{s_2}$$

The distance $d$ is the magnitude of this vector -- that is,
$d=||\vec{d}||$.

Using this formula for $d$, we can calculate whether two spheres are
overlapping using the inequality that was previously described.
However, there's an opportunity for optimization here -- calculating
the magnitude of a vector involves calculating a square root. We can
rewrite our inequality by squaring both sides, which will allow us to
calculate the square magnitude of $\vec{d}$ instead of calculating the
magnitude directly. Thus, if the following inequality holds, then the
spheres are colliding:

$$(r_1+r_2)^2 > d^2$$

*** Implementing a Sphere-Sphere Overlap Check

Using some C++-like pseudocode, we can implement the above check as
following:

#+begin_src C++ -n
  bool AreColliding(Sphere s1, Sphere s2)
  {
    float d_sq = (s2 - s1).SqrMagnitude();
    float sum_of_radii = s1.r + s2.r;
    bool test = sum_of_radii * sum_of_radii > d_sq;
    return test; (ref:Return Statement)
  }
#+end_src

Note that the line labeled [[(Return Statement)]] is the same as doing

#+begin_src C++
  if (test)
    return true;
  return false;
#+end_src

but without requiring an =if= statement.

* How To Move Two Colliding Objects

Now that we know two objects are colliding, our next step is to move
each sphere so that it no longer collides with the other sphere.

We determined in our last section how to identify when two spheres are
overlapping, but we also came across a way to determine if two spheres
are exactly touching but /not/ overlapping. That was in the case where
$r_1+r_2=d$. We want to move our spheres into this state. To do this,
first we will calculate how far we need to move the spheres in total
to keep them from overlapping. We will proceed by figuring out /how
much the spheres are overlapping/, which is exactly how much they need
to move to no longer overlap.

** Determining Penetration

Penetration is a scalar that describes how much the spheres overlap.

#+ATTR_HTML: :width 400px
#+ATTR_LATEX: :width 400px
#+CAPTION: Two Overlapping Circles. Distance is the dotted blue line. Penetration is the solid red line.
[[./circle_overlap_highres.png]]

While it is easy to visualize, it may not be obvious how to calculate
it. Intuitively, we know that, because the spheres are overlapping,
$r_1 + r_2 > d$ holds. So, we need to move the spheres such that $d$
increases to be exactly $r_1 + r_2$. So we need to add some value to
$d$.

To determine this quantity algebraically, we can set up the equation

$$r_1+r_2=d+x$$,

where $x$ is the quantity we're looking for. Solving for $x$, we find
$$x=r_1+r_2-d$$.

So the value of the penetration, which is the same as the amount by
which we need to move the spheres to keep them from overlapping, is
$p=r_1+r_2-d$. We will refer to the penetration as $p$ from now on.

Our next step is to determine what direction to move each sphere. To
do this, we will determine a very important vector, called the
/normal/ of the collision, and which we will designate as $\hat{n}$.

** Determining the Normal
Recall that, to calculate $d$, we used vector subtraction to find a
vector, $\vec{d}$ that started at the center of sphere 1 and ended at
the center of sphere 2. This vector is always the most direct path
from one sphere to another. As such, it represents the axis upon which
we'd like to move our spheres. Therefore, $\hat{n}=\frac{\vec{d}}{||\vec{d}||}$.

Since we chose $\vec{d}$ as $\vec{s_1}-\vec{s_2}$, our normal vector
$\hat{n}$ goes from $\vec{s_2}$ to $\vec{s_1}$. That means $\hat{n}$
points in the direction we would like $\vec{s_1}$ to move in, and
$-\hat{n}$ points in the direction we would like $\vec{s_2}$ to move
in.

** Determining Displacement for Each Sphere

We now the the penetration $p$ and the normal $\hat{n}$. All that
remains is to combine them to move each sphere.

One option would be to move $\vec{s_1}$ in the direction of $\hat{n}$
and with magnitude $p$. That would cause $\vec{s_1}$ to move enough so
that $\vec{s_1}$ and $\vec{s_2}$ are no longer in contact.

Another option would be to divide penetration evenly, and move each
sphere $\frac{1}{2}p$ in the direction of $\pm\hat{n}$. This works
when the particles have the same mass, but we would see some quite
unintuitive behavior if we experimented with using this technique on
particles of very different masses. For example, a ping-pong ball
hitting a boulder would move the boulder just as much as it moves the
ping-pong ball. Therefore, we still need to account for mass.

** Accounting for Mass in Displacement

The intuitive idea behind accounting for mass is that /heavy objects
should move less than light objects/. We already know the total
movement each object will make is $p$, the penetration. A nice way to
divide this problem up is to frame it as the question, /What
percentage of $p$ should each particle move?/

A simple way to solve this is to say that objects should move relative
to how much mass they take up in the total system. That is, if $m_1$
and $m_2$ are the masses of sphere 1 and sphere 2, respectively, and
$m_1=2$ and $m_2=1$, we would expect sphere 1 to move /half/ as far as
sphere 2, because it is /twice/ as heavy.

This is somewhat simplified by the manner in which we're storing
our masses. We don't have direct access to $m_1$ -- instead, we have
$m_1^{-1}$. Luckily, that makes the calculation somewhat more
intuitive -- now, if $m_1^{-1}=2$ and $m_2^{-1}=1$, sphere 1 should
move /twice/ as far as sphere 2, because its inverse mass is /twice as
large/.

Now, we can simply total up the inverse mass of the system and compare
ratios to determine how far sphere 1 should move and how far sphere 2
should move:

$$d_{1}^{pct} = \frac{m_{1}^{-1}}{m_1^{-1} + m_2^{-1}}$$
$$d_2^{pct} = \frac{m_2^{-1}}{m_1^{-1} + m_2^{-1}}$$

where $d_1^{pct}$ and $d_2^{pct}$ are the percentages of the total
displacement that sphere 1 and sphere 2 should adopt, respectively.

** Bringing It All Together

Finally, we can use this to determine the total displacement of sphere
1 and sphere 2:

$$\vec{\Delta s_1} = \hat{n} d^{pct}_1 p$$
$$\vec{\Delta s_2} = -\hat{n} d_2^{pct} p$$

Or, letting $d_1 = d_1^{pct} p$ and $d_2 = d_2^{pct} p$:

$$\vec{\Delta s_1} = \hat{n} d_1$$
$$\vec{\Delta s_2} = -\hat{n} d_2$$

** Avoiding Redundant Calculations

As a final note, observe that the penetration, $p$, tells us whether
or not two spheres are colliding. While we wrote a function that tests
if two spheres overlap, we don't need to call this function directly
in our calculations of displacement. That's because, if $p\leq 0$,
it's impossible for the two spheres to be overlapping. Therefore, when
writing our code to move two spheres, we can avoid writing this:

#+begin_src C++
  void ApplyDisplacementIfColliding(Sphere& s1, Sphere& s2)
  {
    if (!AreOverlapping(s1, s2)) return;

    float penetration = CalculatePenetration(s1, s2);
    vector3 normal = CalculateNormal(s1, s2);
    float pctToMoveS1 = CalculatePctToMoveS1(s1, s2);
    float pctToMoveS2 = CalculatePctToMoveS2(s1, s2);
    s1.position += normal * pctToMoveS1 * penetration;
    s2.position += normal * pctToMoveS2 * penetration;
  }
#+end_src

By instead writing this:

#+begin_src C++
  void ApplyDisplacementIfColliding(Sphere& s1, Sphere& s2)
  {
    float penetration = CalculatePenetration(s1, s2);

    if (penetration <= 0) return;
    vector3 normal = CalculateNormal(s1, s2);
    float pctToMoveS1 = CalculatePctToMoveS1(s1, s2);
    float pctToMoveS2 = CalculatePctToMoveS2(s1, s2);
    s1.position += normal * pctToMoveS1 * penetration;
    s2.position += normal * pctToMoveS2 * penetration;
  }
#+end_src

Which allows us to avoid redundant calculations.

* Aside: Why not use Object-Oriented Programming?

Tasks such as collision detection are poorly suited to an
object-oriented programming paradigm. OOP encourages programmers to
have all objects "take care" of themselves, rather than having
external functions that modify objects directly. However, when
detecting collisions, we come across two major issues that OOP creates
for us:

1. We detect collisions on /pairs of types/, not on single types
   themselves.
2. We detect collisions across /pairs of objects/, not across /each
   individual object/.

** Algorithms Operate on Pairs of Types
To see why this causes problems for us, let's look at what would
happen if we tried to write an IsOverlapping() function between a
sphere and a plane using OOP:

#+NAME: Sphere.h
#+BEGIN_SRC C++
  class Sphere
  {
  public:
    bool IsOverlapping(Plane p);
    // ... more code here ...
  };
#+END_SRC

#+NAME: Plane.h
#+BEGIN_SRC C++
  class Plane
  {
  public:
    bool IsOverlapping(Sphere s);
    // ... more code here ...
  };
#+END_SRC

If we implement both =Sphere::IsOverlapping(Plane p)= and
=Plane::IsOverlapping(Sphere s)=, we will be writing the exact same
code in two different places, because the algorithm to detect whether
a sphere and a plane overlap is the same as the algorithm to detect
whether a plane and a sphere overlap!

Because of this fact, we'll have a much easier time if we simply write
our collision algorithms as functions:

: bool IsOverlapping(Sphere s, Plane p);

** Algorithms Operate on Pairs of Objects

Let's assume we took the OOP approach and defined a
=Sphere::IsOverlapping(Sphere s)= function. This doesn't seem so bad
-- after all, we can now test to see if two spheres are overlapping,
and we've only implemented our algorithm once. Even in this case, we
will run into trouble when we try to call =IsOverlapping()= on each
sphere.

Let's take the naïve solution and, on each =FixedUpdate()=, have each
sphere react if it is overlapping another sphere in the scene:

#+BEGIN_SRC C++
  void Sphere::FixedUpdate()
  {
    std::vector<Sphere> spheres = FindObjectsOfType<Sphere>();
    for (Sphere& s : spheres)
    {
      if (this->IsOverlapping(s)) this->ResolveCollision(s);
    }
  }
#+END_SRC

Do you see the problem? Let's say we have two spheres in our scene, s1
and s2. =s1->FixedUpdate()= will cause s1 to check its collision
against s2. Then, =s2->FixedUpdate()= will cause s2 to check its
collision with s1. But the second check is completely unnecessary --
we only need to resolve the collision between two spheres (or any
shape) once. After s1 has checked against s2, that pair of shapes has
been successfully checked and does not need to be checked again.
